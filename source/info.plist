<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.theo.theoworkflow</string>
	<key>category</key>
	<string>Tools</string>
	<key>connections</key>
	<dict>
		<key>0172E2CC-CD2D-4673-8EB8-7614166FEAB2</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>DE908813-1218-4700-820B-9CA485DE2D45</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>13DEA849-5850-4157-AE36-B10B42EBDBA1</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>DE908813-1218-4700-820B-9CA485DE2D45</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>6DEB1E35-7AB0-4966-B1EC-5B8C3E2D1C59</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>6DEB1E35-7AB0-4966-B1EC-5B8C3E2D1C59</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>E062AF98-6641-4949-B912-EC6480BE5339</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>B3B0ACF7-E58C-46B6-8A42-180CAD75EB4C</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>D13C9FF3-3BA6-49C4-B33E-9E72E0D321AB</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>DE908813-1218-4700-820B-9CA485DE2D45</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>E062AF98-6641-4949-B912-EC6480BE5339</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>E062AF98-6641-4949-B912-EC6480BE5339</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>F89ED05A-BB43-42AB-A7B5-4186CBB6B180</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>B708E224-4C9A-4A8D-BA99-3D3B38F18F10</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>F89ED05A-BB43-42AB-A7B5-4186CBB6B180</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>B3B0ACF7-E58C-46B6-8A42-180CAD75EB4C</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>C69C33B5-9590-4B43-875B-F84DC369EE69</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>9681EFE2-6CB6-43EC-8DB9-FF13F0DDD298</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>CED3ABDD-BE14-4499-A2E5-E696A1A442B1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Theotao</string>
	<key>description</key>
	<string>快速添加提醒事项插件</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>快速添加提醒事项</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>ObjC.import('Foundation');
ObjC.import('stdlib');
var window = {} // required for chrono.js to function properly, see https://github.com/wanasit/chrono/issues/34

function run(argv) {
	var query = argv[0],
		results = {},
		jsonResult = {},
		shouldQuit = !isRemindersRunning();
		
	results = parseReminderQuery(query);
	

	env = {"alfredworkflow":{"arg":results['items'][0]['arg'], 
			"variables": {
				"reminders":JSON.stringify(results['reminders']),
				"quitAfter":JSON.stringify(shouldQuit)
			}
		}
	};
	return JSON.stringify(env);
}

// everything below is duplicated from the trigger script filter

function isRemindersRunning() {
	return Application('Reminders').running();
}

// returns a dictionary corresponding to an Alfred action item
// https://www.alfredapp.com/help/workflows/inputs/script-filter/json/
// arg: Alfred item arg
// valid: true|false whether to enable action
// reminderText: text of the reminder
// date: remind me date
// whenText: text corresponding to the remind me date
// priority: 1|2|3 reminder priority value
//
function getAction(options) {
	var Reminders = Application('Reminders');
  var arg = options['arg'],
    valid = options['valid'],
    icon = "",
    title = "Add Reminder",
    subtitle = "Create a new reminder";

  if(options['reminderText']) subtitle += " to \"" + options['reminderText'] + "\"";
  else if(options['application']['text']) subtitle += " about \"" + options['application']['text'] + "\"";

  if(options['date']) {
    subtitle += " on " + options['date'].toString();
  }

  if(options['whenText']) {
    title = "Remind me " + options['whenText'];
  }

  if(options['application']) {
    var appname = options['application']['appname'];
    icon = options['application']['icon'];
    title += " from " + appname;
  }

  if(options['priority']) {
    switch(parseInt(options['priority'])) {
      case 0:
        break;
      case 1:
        title += " (low priority)"
		subtitle += " (low priority)"
        break;
      case 2:
        title += " (medium priority)"
		subtitle += " (medium priority)"
        break;
      case 3:
        title += " (high priority)"
		subtitle += " (high priority)"
        break;
    }
  }

	if(options['reminderList']) {
		// verify a matching list exists
		lists = Reminders.lists.whose({name:options['reminderList']})
		if(lists.length) {
			subtitle += " in the " + lists[0].name() + " list";
		}	else {
			valid = false;
			title = "Cannot create reminder"
			subtitle = "No list called \"" + options['reminderList'] + "\" was found in Reminders";
			// TODO: maybe add a different icon here
		}
	}

  var item = {title:title, arg:arg, valid:valid, subtitle:subtitle, icon:{path:icon}};
  return item;
}

// returns a dictionary containing data to make a reminder
// arg: Alfred item arg
// reminderText: text of the reminder
// reminderBody: body text for the reminder
// date: remind me date
// list: reminder list name
// priority: 1|2|3 reminder priority value
// application: application name
//
function getReminderData(options) {
  var arg = options['arg'],
    text = options['reminderText'],
    priority = options['priority'],
    body = "",
    date = "",
    application = "",
    list = "";

  if(options['reminderBody']) {
    body = options['reminderBody'];
  }

  if(options['date']) {
    date = options['date'];
  }

  if(options['application']) {
    application = options['application']['appname'];
    if(!text) text = options['application']['text'];
    if(!body) body = options['application']['body'];
  }

  if(options['reminderList']) {
    list = options['reminderList'];
  }

  var data = {arg:arg, text:text, body:body, date:date, list:list, priority:parseInt(priority), application:application}
  return data
}

function parseReminderQuery(query) {
	var originalQuery = query;
	var parsedReminder = {}
	var items = []
	var reminders = []

  // list supported applications along with the associated JXA to fetch information
  var supportedReminderApplications = [
  	{appname:"Address Book", icon:"Address Book.png", reminderText:'Application("Contacts").selection()[0].name()', reminderBody:'"addressbook://" + Application("Contacts").selection()[0].id()'},
		{appname:"AdobeAcrobat", icon:"AcrobatPro.png", reminderText:'Application("Adobe Acrobat").activeDoc.name()', reminderBody:'var p = Application("Adobe Acrobat").activeDoc.fileAlias().toString(); if(p) "file://" + escape(p)'},
		{appname:"Chromium", icon:"Chromium.png", reminderText:'Application("Chromium").windows[0].activeTab.title();', reminderBody:'Application("Chromium").windows[0].activeTab.url();'},
		{appname:"Contacts", icon:"Address Book.png", reminderText:'Application("Contacts").selection()[0].name()', reminderBody:'"addressbook://" + Application("Contacts").selection()[0].id()'},
		{appname:"Finder", icon:"Finder.png", reminderText:'Application("Finder").selection()[0].name()', reminderBody:'Application("Finder").selection()[0].url()'},
		{appname:"FoldingText", icon:"App.png", reminderText:'Application("FoldingText").documents[0].name()', reminderBody:'var p = Application("FoldingText").documents[0].path(); if(p) "file://" + escape(p)'},
		{appname:"Google Chrome", icon:"Chrome.png", reminderText:'Application("Google Chrome").windows[0].activeTab.title();', reminderBody:'Application("Google Chrome").windows[0].activeTab.url();'},
		{appname:"Google Chrome Canary", icon:"Chrome Canary.png",  reminderText:'Application("Google Chrome Canary").windows[0].activeTab.title();', reminderBody:'Application("Google Chrome Canary").windows[0].activeTab.url();'},
        {appname:"Mailplane 3", icon:"Mailplane 3.png", reminderText:'Application("Mailplane 3").currenttitle()', reminderBody:'Application("MailPlane 3").currentmessagetext()'},
		{appname:"Mail", icon:"Mail.png",  reminderText:'var m = Application("Mail").selection()[Application("Mail").selection().length-1]; m.subject() + " (From " + m.sender() + ")"', reminderBody:'var m = Application("Mail").selection()[Application("Mail").selection().length-1]; "message://&lt;" + m.messageId() + "&gt;"'},
  	{appname:"Microsoft PowerPoint", icon:"Powerpoint.png", reminderText:'Application("Microsoft PowerPoint").activePresentation.name()', reminderBody:'var p = Application("Microsoft PowerPoint").activePresentation.fullName(); if(p) "file://" + escape(p)'},
		{appname:"Microsoft Word", icon:"MSWord.png", reminderText:'Application("Microsoft Word").activeDocument.name()', reminderBody:'var p = Application("Microsoft Word").activeDocument.posixFullName(); if(p) "file://" + escape(p)'},
  	{appname:"Safari", icon:"Safari.png", reminderText:'Application("Safari").windows[0].currentTab.name();', reminderBody:'Application("Safari").windows[0].currentTab.url();'},
		{appname:"TextEdit", icon:"TextEdit.png", reminderText:'Application("TextEdit").documents[0].name()', reminderBody:'var p = Application("TextEdit").documents[0].path(); if(p) "file://" + escape(p)'},
		{appname:"TextMate", icon:"TextMate.png", reminderText:'Application("TextMate").documents[0].name()', reminderBody:'var p = Application("TextMate").documents[0].path(); if(p) "file://" + escape(p)'},
		{appname:"Vienna", icon:"RSS.png", reminderText:'Application("Vienna").currentArticle().title()', reminderBody:'Application("Vienna").currentArticle().link()'},
  	{appname:"WebKit", icon:"Safari.png", reminderText:'Application("WebKit").windows[0].currentTab.name();', reminderBody:'Application("WebKit").windows[0].currentTab.url();'},
  ]
  	if(! window.chrono) { 
		//https://github.com/dtinth/JXA-Cookbook/wiki/Importing-Scripts

		//http://www.alfredforum.com/topic/9070-how-to-workflowenvironment-variables/
		//https://www.alfredapp.com/help/workflows/script-environment-variables/
		var chronoPath = $.getenv('alfred_preferences') + "/workflows/" + $.getenv('alfred_workflow_uid') + "/chrono.min.js"


		// uncomment for local testing in script editor
		//var path = app.pathTo(this);
		//var workflowFolder =  $.NSString.alloc.initWithUTF8String(path).stringByDeletingLastPathComponent.js + '/';
		//var chronoPath = workflowFolder + "chrono.min.js"

		console.log(chronoPath)

		var fm = $.NSFileManager.defaultManager;
		var contents = fm.contentsAtPath(chronoPath); // NSData
		contents = $.NSString.alloc.initWithDataEncoding(contents, $.NSUTF8StringEncoding);

		eval(ObjC.unwrap(contents));
	}
	
	// extract list
	var reminderList = "";
	// http://regexr.com/3f03r
	var listRegex = /(.+) in (.+) list$/i
	var matches = listRegex.exec(query)
	if(matches &amp;&amp; matches.length == 3) {
		reminderList = matches[2];
		query = matches[1];
	}

	// extract priority
	var priority = "";
  // test for !, !!, !!! at beginning
  // http://regexr.com/3er7r
  var priorityRegex = /^(!{1,3})\s(.+)/i
	var matches = priorityRegex.exec(query)
	if(matches &amp;&amp; matches.length == 3) {
    priority = matches[1].length;
    query = matches[2];
  } else {
    // test for !, !!, !!! at end
    // http://regexr.com/3er7u
    var priorityRegex = /\s(.+)\s(!{1,3})$/i
  	var matches = priorityRegex.exec(query)
  	if(matches &amp;&amp; matches.length == 3) {
      priority = matches[2].length;
      query = matches[1];
    } else {
      // test for !3, p1, priority 1, etc
    	// http://regexr.com/3er73
    	var priorityRegex = /(.+)\s(priority|p|!)\s*([1-3])\s*$/i
    	var matches = priorityRegex.exec(query)
    	if(matches &amp;&amp; matches.length == 4) {
    		priority = matches[3];
    		query = matches[1];
      } else {
        // test for !hi, p med, priority low, etc
      	// http://regexr.com/3er7c
        var priorityRegex = /(.+)\s(priority\s+|p\s*|!\s*)(l|lo|low|m|med|medium|h|hi|high)\s*$/i
      	var matches = priorityRegex.exec(query)
        if(matches &amp;&amp; matches.length == 4) {
      		priorityText = matches[3];
          if(priorityText[0]=="l") priority = 1;
          else if(priorityText[0]=="m") priority = 2;
          else if(priorityText[0]=="h") priority = 3;
      		query = matches[1];
        } else {
          // test for hi!, med p, low priority, etc
        	// http://regexr.com/3er7i
          var priorityRegex = /(.+)\s(l|lo|low|m|med|medium|h|hi|high)(\s+priority|\s*p|\s*!)\s*$/i
        	var matches = priorityRegex.exec(query)
          if(matches &amp;&amp; matches.length == 4) {
        		priorityText = matches[2];
            if(priorityText[0]=="l") priority = 1;
            else if(priorityText[0]=="m") priority = 2;
            else if(priorityText[0]=="h") priority = 3;
        		query = matches[1];
          }
        }
      }
    }
  }

  // extract application
  var application = "",
    reminderBody = "";
  // test for "this" keyword
  // http://regexr.com/3er84
  var thisRegex = /^this$|^this\s(.*)/i
  var matches = thisRegex.exec(query)
  if(matches &amp;&amp; matches.length == 2) {
    query = matches[1];
    var app = Application("System Events").applicationProcesses.where({
       frontmost: true
    })[0];
    var currentApplication = app.properties().name;
    console.log(currentApplication);
    application = supportedReminderApplications.find(function (a) {
  		return a.appname == currentApplication;
  	});

    if(!application) {
      // terminate with an unactionable message that current application is not supported
      var item = {title:"Add Reminder", arg:-1, valid:false, subtitle:currentApplication + " is not supported by this workflow at this time", icon:{path:"Instruments.png"}};
      return {items:[item]};
    }

    // get application-specific data
    application['text'] = eval(application['reminderText']);
    console.log(application['text']);
    application['body'] = eval(application['reminderBody'])
    console.log(application['body']);

  }

	results = window.chrono.parse(query);
	var now = new Date();
	
	for (var i = 0; i &lt; results.length; i++) {
		resultText = query.replace(results[i].text,'');
		var d = results[i].start.date(); // Create a Date object
		// If date is in the past, assume intended date is tomorrow
		if (d &lt; now) {
			d.setDate(now.getDate() + 1);
		}
		var reminderText = resultText.trim();
		items.push(getAction({arg:i, valid:true, reminderText:reminderText, date:d, whenText:results[i].text, priority:priority, reminderList:reminderList}));
		reminders.push(getReminderData({arg:i, reminderText:reminderText, reminderBody:reminderBody, date:d, list:"", priority:priority, application:application, reminderList:reminderList}));
	}

	// always submit non-dated item
	items.push(getAction({arg:-1, valid:true, reminderText:query, priority:priority, application:application, reminderList:reminderList}));
	reminders.push(getReminderData({arg:-1, reminderText:query, reminderBody:"", date:"", list:"", priority:priority, application:application, reminderList:reminderList}));

	parsedReminder['items'] = items;
	parsedReminder['reminders'] = reminders;
	
	return parsedReminder;
}


function showHelpItems() {
  var helpItems = [
  	"do something crazy",
	"today release the hamsters into the wild",
	"tomorrow bring about financial ruin upon my enemies",
	"in 5 minutes drop everything",
	"in 2 hours laugh out loud in Reminders list",
	"in 3 days 1 hour pick stuff up off the floor",
	"24/12/13 to forget everything I know about things in movies",
	"12 June 15 to come up with some interesting ideas",
	"31-12-99 23:22 panic about the millennium bug",
	"at 2pm wait for nothing in particular", 
	"next thursday at 15.30 ask some difficult questions",
	"!!! in 2 weeks an important meeting",
	"thursday have a banana medium priority",
	"decide what to have for lunch !lo",
	"make a turkey sandwich p3",
	"this",
  ],
  	parsedReminder = {},
  	items = [],
  	reminders = [];
  
  for (var i = 0; i &lt; helpItems.length; i++) {
  	var parsedReminder = parseReminderQuery(helpItems[i]);
	console.log(helpItems[i]);
	if(parsedReminder['items']) {
		item = parsedReminder['items'][0];
		item['title'] = "r " + helpItems[i];
		item['valid'] = false;
		items.push(item);
	}
	if(parsedReminder['reminders']) {
		reminders.push(parsedReminder['reminders'][0]);
	}
  }
  
  parsedReminder['items'] = items;
  parsedReminder['reminders'] = reminders;
	
  return parsedReminder;
 }</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>7</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>DE908813-1218-4700-820B-9CA485DE2D45</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict/>
			<key>type</key>
			<string>alfred.workflow.trigger.external</string>
			<key>uid</key>
			<string>0172E2CC-CD2D-4673-8EB8-7614166FEAB2</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>applescript</key>
				<string>on alfred_script(q)
  tell application "Reminders" to quit
end alfred_script</string>
				<key>cachescript</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.applescript</string>
			<key>uid</key>
			<string>D13C9FF3-3BA6-49C4-B33E-9E72E0D321AB</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>inputstring</key>
				<string>{var:quitAfter}</string>
				<key>matchcasesensitive</key>
				<true/>
				<key>matchmode</key>
				<integer>0</integer>
				<key>matchstring</key>
				<string>true</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.filter</string>
			<key>uid</key>
			<string>B3B0ACF7-E58C-46B6-8A42-180CAD75EB4C</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>{query}</string>
				<key>passthroughargument</key>
				<false/>
				<key>variables</key>
				<dict>
					<key>defaultList</key>
					<string></string>
				</dict>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>E062AF98-6641-4949-B912-EC6480BE5339</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>function run(argv) {
	var query = argv[0];

	ObjC.import('stdlib');
	var reminders = JSON.parse($.getenv('reminders'));
	//console.log(reminders);


	// get the actioned item
	reminderData = reminders.find(function (r) {
		return r.arg == query;
	});
	//console.log(reminderData);

	return createReminder(reminderData, $.getenv('defaultList'));
}

function createReminder(reminderData, defaultList) {
	var Reminders = Application('Reminders');
	try {
		data = {name:reminderData['text']}
		console.log("Name:" + data['name'])
		if(reminderData['body']) {
			data['body'] = reminderData['body'];
		}
		if(reminderData['date']) {
			data['remindMeDate'] = new Date(reminderData['date'])
			console.log("Date:" + data['date']);
		}
		if(reminderData['priority']) {
			data['priority'] = parseInt(reminderData['priority']);
		}
		if(reminderData['list'] &amp;&amp; Reminders.lists.whose({name:reminderData['list']}).length) {
			// list provided by query
			reminderList = Reminders.lists.whose({name:reminderData['list']})[0];
		} else if(defaultList &amp;&amp; Reminders.lists.whose({name:defaultList}).length) {
			// list provided by worklow variable
			reminderList = Reminders.lists.whose({name:defaultList})[0];
		} else {
			// default list provided by application
			reminderList = Reminders.defaultList();
		}
		//console.log(reminder);
		reminder = Reminders.Reminder(data);
		reminderList.reminders.push(reminder);
		// nb. querying the reminder object at this point causes reminders app to hang for ~15 sec
		return "创建一个提醒: " + data['name'];
	} catch (e) {
		console.log(e);
		return e;
	}
}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>7</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>F89ED05A-BB43-42AB-A7B5-4186CBB6B180</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<true/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>{query}</string>
				<key>title</key>
				<string>Reminders</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>C69C33B5-9590-4B43-875B-F84DC369EE69</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<false/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>0</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<false/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>escaping</key>
				<integer>68</integer>
				<key>keyword</key>
				<string>t</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>2</integer>
				<key>runningsubtext</key>
				<string>Processing request…</string>
				<key>script</key>
				<string>ObjC.import('Foundation');
ObjC.import('stdlib');
var window = {} // required for chrono.js to function properly, see https://github.com/wanasit/chrono/issues/34

function run(argv) {
	var query = argv[0],
		results = {},
		jsonResult = {},
		shouldQuit = !isRemindersRunning();
		
	if(query == "help") {
		results = showHelpItems();
	} else {
		results = parseReminderQuery(query);
	}
	
	jsonResult['items'] = results['items'];
	jsonResult['variables'] = {
		"reminders":JSON.stringify(results['reminders']),
		"quitAfter":JSON.stringify(shouldQuit)
	};
	return JSON.stringify(jsonResult);
}

function isRemindersRunning() {
	return Application('Reminders').running();
}

// returns a dictionary corresponding to an Alfred action item
// https://www.alfredapp.com/help/workflows/inputs/script-filter/json/
// arg: Alfred item arg
// valid: true|false whether to enable action
// reminderText: text of the reminder
// date: remind me date
// whenText: text corresponding to the remind me date
// priority: 1|2|3 reminder priority value
//
function getAction(options) {
	var Reminders = Application('Reminders');
  var arg = options['arg'],
    valid = options['valid'],
    icon = "",
    title = "添加提醒事项",
    subtitle = "创建一个事项";

  if(options['reminderText']) subtitle += " to \"" + options['reminderText'] + "\"";
  else if(options['application'] &amp;&amp; options['application']['text']) subtitle += " about \"" + options['application']['text'] + "\"";

  if(options['date']) {
    subtitle += " on " + options['date'].toString();
  }

  if(options['whenText']) {
    title = "提醒我 " + options['whenText'];
  }

  if(options['application']) {
    var appname = options['application']['appname'];
    icon = options['application']['icon'];
    title += " from " + appname;
  }

  if(options['priority']) {
    switch(parseInt(options['priority'])) {
      case 0:
        break;
      case 1:
        title += " (low priority)"
		subtitle += " (low priority)"
        break;
      case 2:
        title += " (medium priority)"
		subtitle += " (medium priority)"
        break;
      case 3:
        title += " (high priority)"
		subtitle += " (high priority)"
        break;
    }
  }

	if(options['reminderList']) {
		// verify a matching list exists
		lists = Reminders.lists.whose({name:options['reminderList']})
		if(lists.length) {
			subtitle += " in the " + lists[0].name() + " list";
		}	else {
			valid = false;
			title = "Cannot create reminder"
			subtitle = "No list called \"" + options['reminderList'] + "\" was found in Reminders";
			// TODO: maybe add a different icon here
		}
	}

  var item = {title:title, arg:arg, valid:valid, subtitle:subtitle, icon:{path:icon}};
  return item;
}

// returns a dictionary containing data to make a reminder
// arg: Alfred item arg
// reminderText: text of the reminder
// reminderBody: body text for the reminder
// date: remind me date
// list: reminder list name
// priority: 1|2|3 reminder priority value
// application: application name
//
function getReminderData(options) {
  var arg = options['arg'],
    text = options['reminderText'],
    priority = options['priority'],
    body = "",
    date = "",
    application = "",
    list = "";

  if(options['reminderBody']) {
    body = options['reminderBody'];
  }

  if(options['date']) {
    date = options['date'];
  }

  if(options['application']) {
    application = options['application']['appname'];
    if(!text) text = options['application']['text'];
    if(!body) body = options['application']['body'];
  }

  if(options['reminderList']) {
    list = options['reminderList'];
  }

  var data = {arg:arg, text:text, body:body, date:date, list:list, priority:parseInt(priority), application:application}
  return data
}

function parseReminderQuery(query) {
	var originalQuery = query;
	var parsedReminder = {}
	var items = []
	var reminders = []

  // list supported applications along with the associated JXA to fetch information
  var supportedReminderApplications = [
  	{appname:"Address Book", icon:"Address Book.png", reminderText:'Application("Contacts").selection()[0].name()', reminderBody:'"addressbook://" + Application("Contacts").selection()[0].id()'},
		{appname:"AdobeAcrobat", icon:"AcrobatPro.png", reminderText:'Application("Adobe Acrobat").activeDoc.name()', reminderBody:'var p = Application("Adobe Acrobat").activeDoc.fileAlias().toString(); if(p) "file://" + escape(p)'},
		{appname:"Chromium", icon:"Chromium.png", reminderText:'Application("Chromium").windows[0].activeTab.title();', reminderBody:'Application("Chromium").windows[0].activeTab.url();'},
		{appname:"Contacts", icon:"Address Book.png", reminderText:'Application("Contacts").selection()[0].name()', reminderBody:'"addressbook://" + Application("Contacts").selection()[0].id()'},
		{appname:"Finder", icon:"Finder.png", reminderText:'Application("Finder").selection()[0].name()', reminderBody:'Application("Finder").selection()[0].url()'},
		{appname:"FoldingText", icon:"App.png", reminderText:'Application("FoldingText").documents[0].name()', reminderBody:'var p = Application("FoldingText").documents[0].path(); if(p) "file://" + escape(p)'},
		{appname:"Google Chrome", icon:"Chrome.png", reminderText:'Application("Google Chrome").windows[0].activeTab.title();', reminderBody:'Application("Google Chrome").windows[0].activeTab.url();'},
		{appname:"Google Chrome Canary", icon:"Chrome Canary.png",  reminderText:'Application("Google Chrome Canary").windows[0].activeTab.title();', reminderBody:'Application("Google Chrome Canary").windows[0].activeTab.url();'},
        {appname:"Mailplane 3", icon:"Mailplane 3.png", reminderText:'Application("Mailplane 3").currenttitle()', reminderBody:'Application("MailPlane 3").currentmessagetext()'},
		{appname:"Mail", icon:"Mail.png",  reminderText:'var m = Application("Mail").selection()[Application("Mail").selection().length-1]; m.subject() + " (From " + m.sender() + ")"', reminderBody:'var m = Application("Mail").selection()[Application("Mail").selection().length-1]; "message://&lt;" + m.messageId() + "&gt;"'},
  	{appname:"Microsoft PowerPoint", icon:"Powerpoint.png", reminderText:'Application("Microsoft PowerPoint").activePresentation.name()', reminderBody:'var p = Application("Microsoft PowerPoint").activePresentation.fullName(); if(p) "file://" + escape(p)'},
		{appname:"Microsoft Word", icon:"MSWord.png", reminderText:'Application("Microsoft Word").activeDocument.name()', reminderBody:'var p = Application("Microsoft Word").activeDocument.posixFullName(); if(p) "file://" + escape(p)'},
  	{appname:"Safari", icon:"Safari.png", reminderText:'Application("Safari").windows[0].currentTab.name();', reminderBody:'Application("Safari").windows[0].currentTab.url();'},
		{appname:"TextEdit", icon:"TextEdit.png", reminderText:'Application("TextEdit").documents[0].name()', reminderBody:'var p = Application("TextEdit").documents[0].path(); if(p) "file://" + escape(p)'},
		{appname:"TextMate", icon:"TextMate.png", reminderText:'Application("TextMate").documents[0].name()', reminderBody:'var p = Application("TextMate").documents[0].path(); if(p) "file://" + escape(p)'},
		{appname:"Vienna", icon:"RSS.png", reminderText:'Application("Vienna").currentArticle().title()', reminderBody:'Application("Vienna").currentArticle().link()'},
  	{appname:"WebKit", icon:"Safari.png", reminderText:'Application("WebKit").windows[0].currentTab.name();', reminderBody:'Application("WebKit").windows[0].currentTab.url();'},
  ]
  	if(! window.chrono) { 
		//https://github.com/dtinth/JXA-Cookbook/wiki/Importing-Scripts

		//http://www.alfredforum.com/topic/9070-how-to-workflowenvironment-variables/
		//https://www.alfredapp.com/help/workflows/script-environment-variables/
		var chronoPath = $.getenv('alfred_preferences') + "/workflows/" + $.getenv('alfred_workflow_uid') + "/chrono.min.js"


		// uncomment for local testing in script editor
		//var path = app.pathTo(this);
		//var workflowFolder =  $.NSString.alloc.initWithUTF8String(path).stringByDeletingLastPathComponent.js + '/';
		//var chronoPath = workflowFolder + "chrono.min.js"

		console.log(chronoPath)

		var fm = $.NSFileManager.defaultManager;
		var contents = fm.contentsAtPath(chronoPath); // NSData
		contents = $.NSString.alloc.initWithDataEncoding(contents, $.NSUTF8StringEncoding);

		eval(ObjC.unwrap(contents));
	}
	
	// extract list
	var reminderList = "";
	// http://regexr.com/3f03r
	var listRegex = /(.+) in (.+) list$/i
	var matches = listRegex.exec(query)
	if(matches &amp;&amp; matches.length == 3) {
		reminderList = matches[2];
		query = matches[1];
	}

	// extract priority
	var priority = "";
  // test for !, !!, !!! at beginning
  // http://regexr.com/3er7r
  var priorityRegex = /^(!{1,3})\s(.+)/i
	var matches = priorityRegex.exec(query)
	if(matches &amp;&amp; matches.length == 3) {
    priority = matches[1].length;
    query = matches[2];
  } else {
    // test for !, !!, !!! at end
    // http://regexr.com/3er7u
    var priorityRegex = /\s(.+)\s(!{1,3})$/i
  	var matches = priorityRegex.exec(query)
  	if(matches &amp;&amp; matches.length == 3) {
      priority = matches[2].length;
      query = matches[1];
    } else {
      // test for !3, p1, priority 1, etc
    	// http://regexr.com/3er73
    	var priorityRegex = /(.+)\s(priority|p|!)\s*([1-3])\s*$/i
    	var matches = priorityRegex.exec(query)
    	if(matches &amp;&amp; matches.length == 4) {
    		priority = matches[3];
    		query = matches[1];
      } else {
        // test for !hi, p med, priority low, etc
      	// http://regexr.com/3er7c
        var priorityRegex = /(.+)\s(priority\s+|p\s*|!\s*)(l|lo|low|m|med|medium|h|hi|high)\s*$/i
      	var matches = priorityRegex.exec(query)
        if(matches &amp;&amp; matches.length == 4) {
      		priorityText = matches[3];
          if(priorityText[0]=="l") priority = 1;
          else if(priorityText[0]=="m") priority = 2;
          else if(priorityText[0]=="h") priority = 3;
      		query = matches[1];
        } else {
          // test for hi!, med p, low priority, etc
        	// http://regexr.com/3er7i
          var priorityRegex = /(.+)\s(l|lo|low|m|med|medium|h|hi|high)(\s+priority|\s*p|\s*!)\s*$/i
        	var matches = priorityRegex.exec(query)
          if(matches &amp;&amp; matches.length == 4) {
        		priorityText = matches[2];
            if(priorityText[0]=="l") priority = 1;
            else if(priorityText[0]=="m") priority = 2;
            else if(priorityText[0]=="h") priority = 3;
        		query = matches[1];
          }
        }
      }
    }
  }

  // extract application
  var application = "",
    reminderBody = "";
  // test for "this" keyword
  // http://regexr.com/3er84
  var thisRegex = /^this$|^this\s(.*)/i
  var matches = thisRegex.exec(query)
  if(matches &amp;&amp; matches.length == 2) {
    query = matches[1];
    var app = Application("System Events").applicationProcesses.where({
       frontmost: true
    })[0];
    var currentApplication = app.properties().name;
    console.log(currentApplication);
    application = supportedReminderApplications.find(function (a) {
  		return a.appname == currentApplication;
  	});

    if(!application) {
      // terminate with an unactionable message that current application is not supported
      var item = {title:"Add Reminder", arg:-1, valid:false, subtitle:currentApplication + " is not supported by this workflow at this time", icon:{path:"Instruments.png"}};
      return {items:[item]};
    }

    // get application-specific data
    application['text'] = eval(application['reminderText']);
    console.log(application['text']);
    application['body'] = eval(application['reminderBody'])
    console.log(application['body']);

  }

	results = window.chrono.parse(query);
	var now = new Date();
	
	for (var i = 0; i &lt; results.length; i++) {
		resultText = query.replace(results[i].text,'');
		var d = results[i].start.date(); // Create a Date object
		// If date is in the past, assume intended date is tomorrow
		if (d &lt; now) {
			d.setDate(now.getDate() + 1);
		}
		var reminderText = resultText.trim();
		items.push(getAction({arg:i, valid:true, reminderText:reminderText, date:d, whenText:results[i].text, priority:priority, reminderList:reminderList}));
		reminders.push(getReminderData({arg:i, reminderText:reminderText, reminderBody:reminderBody, date:d, list:"", priority:priority, application:application, reminderList:reminderList}));
	}

	// always submit non-dated item
	items.push(getAction({arg:-1, valid:true, reminderText:query, priority:priority, application:application, reminderList:reminderList}));
	reminders.push(getReminderData({arg:-1, reminderText:query, reminderBody:"", date:"", list:"", priority:priority, application:application, reminderList:reminderList}));

	parsedReminder['items'] = items;
	parsedReminder['reminders'] = reminders;
	
	return parsedReminder;
}


function showHelpItems() {
  var helpItems = [
  	"记录一些有趣到事情",
	"今天把球鞋买了",
	"明天录制歌曲",
	"在5分钟内 完成整理",
	"在2小时内 处理要做到事情",
	"在3天2小时 内解决bug",
	"22/12/13 去看电影",
	"22-12-99 23:22 记得提交代码",
	"下午两点 记录工作", 
	"下周四18点 开大会",
	"this",
  ],
  	parsedReminder = {},
  	items = [],
  	reminders = [];
  
  for (var i = 0; i &lt; helpItems.length; i++) {
  	var parsedReminder = parseReminderQuery(helpItems[i]);
	console.log(helpItems[i]);
	if(parsedReminder['items']) {
		item = parsedReminder['items'][0];
		item['title'] = "r " + helpItems[i];
		item['valid'] = false;
		items.push(item);
	}
	if(parsedReminder['reminders']) {
		reminders.push(parsedReminder['reminders'][0]);
	}
  }
  
  parsedReminder['items'] = items;
  parsedReminder['reminders'] = reminders;
	
  return parsedReminder;
 }</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>例如‘t 明天下午4点 打篮球’</string>
				<key>title</key>
				<string>添加一个提醒事项</string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>6DEB1E35-7AB0-4966-B1EC-5B8C3E2D1C59</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>json</key>
				<string>{
  "alfredworkflow" : {
    "arg" : "{query}",
    "config" : {
    },
    "variables" : {
      "hello": 1,
      "supportedApplications" : [
        [
          {
            "reminderText" : "Application('Contacts').selection()[0].name()",
            "icon" : "Address Book.png",
            "appname" : "Address Book",
            "reminderBody" : "'addressbook:\/\/' + Application('Contacts').selection()[0].id()"
          },
          {
            "reminderText" : "Application('Adobe Acrobat').activeDoc.name()",
            "icon" : "AcrobatPro.png",
            "appname" : "AdobeAcrobat",
            "reminderBody" : "var p = Application('Adobe Acrobat').activeDoc.fileAlias().toString(); if(p) 'file:\/\/' + escape(p)"
          },
          {
            "reminderText" : "Application('Chromium').windows[0].activeTab.title();",
            "icon" : "Chromium.png",
            "appname" : "Chromium",
            "reminderBody" : "Application('Chromium').windows[0].activeTab.url();"
          },
          {
            "reminderText" : "Application('Contacts').selection()[0].name()",
            "icon" : "Address Book.png",
            "appname" : "Contacts",
            "reminderBody" : "'addressbook:\/\/' + Application('Contacts').selection()[0].id()"
          },
          {
            "reminderText" : "Application('Finder').selection()[0].name()",
            "icon" : "Finder.png",
            "appname" : "Finder",
            "reminderBody" : "Application('Finder').selection()[0].url()"
          },
          {
            "reminderText" : "Application('FoldingText').documents[0].name()",
            "icon" : "App.png",
            "appname" : "FoldingText",
            "reminderBody" : "var p = Application('FoldingText').documents[0].path(); if(p) 'file:\/\/' + escape(p)"
          },
          {
            "reminderText" : "Application('Google Chrome').windows[0].activeTab.title();",
            "icon" : "Chrome.png",
            "appname" : "Google Chrome",
            "reminderBody" : "Application('Google Chrome').windows[0].activeTab.url();"
          },
          {
            "reminderText" : "Application('Google Chrome Canary').windows[0].activeTab.title();",
            "icon" : "Chrome Canary.png",
            "appname" : "Google Chrome Canary",
            "reminderBody" : "Application('Google Chrome Canary').windows[0].activeTab.url();"
          },
          {
            "reminderText" : "Application('Mailplane 3').currenttitle()",
            "icon" : "Mailplane 3.png",
            "appname" : "Mailplane 3",
            "reminderBody" : "Application('MailPlane 3').currentmessagetext()"
          },
          {
            "reminderText" : "var m = Application('Mail').selection()[Application('Mail').selection().length-1]; m.subject() + ' (From ' + m.sender() + ')'",
            "icon" : "Mail.png",
            "appname" : "Mail",
            "reminderBody" : "var m = Application('Mail').selection()[Application('Mail').selection().length-1]; 'message:\/\/&lt;' + m.messageId() + '&gt;'"
          },
          {
            "reminderText" : "Application('Microsoft PowerPoint').activePresentation.name()",
            "icon" : "Powerpoint.png",
            "appname" : "Microsoft PowerPoint",
            "reminderBody" : "var p = Application('Microsoft PowerPoint').activePresentation.fullName(); if(p) 'file:\/\/' + escape(p)"
          },
          {
            "reminderText" : "Application('Microsoft Word').activeDocument.name()",
            "icon" : "MSWord.png",
            "appname" : "Microsoft Word",
            "reminderBody" : "var p = Application('Microsoft Word').activeDocument.posixFullName(); if(p) 'file:\/\/' + escape(p)"
          },
          {
            "reminderText" : "Application('Safari').windows[0].currentTab.name();",
            "icon" : "Safari.png",
            "appname" : "Safari",
            "reminderBody" : "Application('Safari').windows[0].currentTab.url();"
          },
          {
            "reminderText" : "Application('TextEdit').documents[0].name()",
            "icon" : "TextEdit.png",
            "appname" : "TextEdit",
            "reminderBody" : "var p = Application('TextEdit').documents[0].path(); if(p) 'file:\/\/' + escape(p)"
          },
          {
            "reminderText" : "Application('TextMate').documents[0].name()",
            "icon" : "TextMate.png",
            "appname" : "TextMate",
            "reminderBody" : "var p = Application('TextMate').documents[0].path(); if(p) 'file:\/\/' + escape(p)"
          },
          {
            "reminderText" : "Application('Vienna').currentArticle().title()",
            "icon" : "RSS.png",
            "appname" : "Vienna",
            "reminderBody" : "Application('Vienna').currentArticle().link()"
          },
          {
            "reminderText" : "Application('WebKit').windows[0].currentTab.name();",
            "icon" : "Safari.png",
            "appname" : "WebKit",
            "reminderBody" : "Application('WebKit').windows[0].currentTab.url();"
          }
        ]
      ]
    }
  }
}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.json</string>
			<key>uid</key>
			<string>13DEA849-5850-4157-AE36-B10B42EBDBA1</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>readonly remote_info_plist='https://github.com/surrealroad/alfred-reminders/raw/master/source/info.plist' # URL of remote info.plist
readonly workflow_url='https://github.com/surrealroad/alfred-reminders/raw/master/Reminders.alfredworkflow' # URL to directly download workflow or workflow download page
readonly workflow_type='workflow' # Either 'workflow' if workflow_url points to direct download, or 'page' if it points to download page
readonly frequency_check='15' # Days between update checks

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED UNLESS YOU KNOW WHAT YOU ARE DOING
function abort {
  echo "${1}" &gt;&amp;2
  exit 1
}

function url_exists {
  curl --silent --location --output /dev/null --fail --range 0-0 "${1}"
}

function notification {
  local readonly terminal_notifier="$(find . -name terminal-notifier.app)"

  if [[ -n "${terminal_notifier}" ]]; then
    "${terminal_notifier}"/Contents/MacOS/terminal-notifier -title "${alfred_workflow_name}" -subtitle 'A new version is available' -message "${1}"
  else
    osascript -e "display notification \"${1}\" with title \"${alfred_workflow_name}\" subtitle \"A new version is available\""
  fi
}

# Local sanity checks
readonly local_info_plist='info.plist'
readonly local_version="$(/usr/libexec/PlistBuddy -c 'print version' "${local_info_plist}")"

[[ -n "${local_version}" ]] || abort 'You need to set a workflow version in the configuration sheet.'
[[ "${workflow_type}" =~ ^(workflow|page)$ ]] || abort "'workflow_type' (${workflow_type}) needs to be one of 'workflow' or 'page'."
[[ "${frequency_check}" =~ ^[0-9]+$ ]] || abort "'frequency_check' (${frequency_check}) needs to be a number."

# Check for updates
if [[ $(find "${local_info_plist}" -mtime +"${frequency_check}"d) ]]; then
  if ! url_exists "${remote_info_plist}"; then abort "'remote_info_plist' (${remote_info_plist}) appears to not be reachable."; fi # Remote sanity check

  readonly tmp_file="$(mktemp)"
  curl --silent --location --output "${tmp_file}" "${remote_info_plist}"
  readonly remote_version="$(/usr/libexec/PlistBuddy -c 'print version' "${tmp_file}")"

  if [[ "${local_version}" != "${remote_version}" ]]; then
    if [[ "${workflow_type}" == 'page' ]]; then
      notification 'Opening download page…'
      open "${workflow_url}"
    else
      if url_exists "${workflow_url}"; then
        notification 'Downloading and installing…'
        curl --silent --location --output "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow" "${workflow_url}"
        open "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow"
      else
        abort "'workflow_url' (${workflow_url}) appears to not be reachable."
      fi # url_exists
    fi # workflow_type
  else
    touch "${local_info_plist}" # Reset timer by touching local file
  fi # diff
fi #find</string>
				<key>scriptargtype</key>
				<integer>0</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>9681EFE2-6CB6-43EC-8DB9-FF13F0DDD298</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>Output from Script: '{query}'
Variables: {allvars}</string>
				<key>cleardebuggertext</key>
				<false/>
				<key>processoutputs</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.debug</string>
			<key>uid</key>
			<string>B708E224-4C9A-4A8D-BA99-3D3B38F18F10</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>Output from Script: '{query}'
Variables: {allvars}</string>
				<key>cleardebuggertext</key>
				<false/>
				<key>processoutputs</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.debug</string>
			<key>uid</key>
			<string>CED3ABDD-BE14-4499-A2E5-E696A1A442B1</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>自动识别中文添加到提醒事项</string>
	<key>uidata</key>
	<dict>
		<key>0172E2CC-CD2D-4673-8EB8-7614166FEAB2</key>
		<dict>
			<key>colorindex</key>
			<integer>10</integer>
			<key>note</key>
			<string>use this trigger to manually provide a query
*only the first result is used*</string>
			<key>xpos</key>
			<integer>10</integer>
			<key>ypos</key>
			<integer>60</integer>
		</dict>
		<key>13DEA849-5850-4157-AE36-B10B42EBDBA1</key>
		<dict>
			<key>colorindex</key>
			<integer>3</integer>
			<key>note</key>
			<string>TODO
Understand why this doesn't get passed along</string>
			<key>xpos</key>
			<integer>50</integer>
			<key>ypos</key>
			<integer>240</integer>
		</dict>
		<key>6DEB1E35-7AB0-4966-B1EC-5B8C3E2D1C59</key>
		<dict>
			<key>colorindex</key>
			<integer>8</integer>
			<key>note</key>
			<string>This handles the parsing of the query into actionable items.</string>
			<key>xpos</key>
			<integer>200</integer>
			<key>ypos</key>
			<integer>210</integer>
		</dict>
		<key>9681EFE2-6CB6-43EC-8DB9-FF13F0DDD298</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater
Provides automatic updating</string>
			<key>xpos</key>
			<integer>820</integer>
			<key>ypos</key>
			<integer>330</integer>
		</dict>
		<key>B3B0ACF7-E58C-46B6-8A42-180CAD75EB4C</key>
		<dict>
			<key>colorindex</key>
			<integer>7</integer>
			<key>note</key>
			<string>Decides whether to quit Reminders at the end</string>
			<key>xpos</key>
			<integer>720</integer>
			<key>ypos</key>
			<integer>90</integer>
		</dict>
		<key>B708E224-4C9A-4A8D-BA99-3D3B38F18F10</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>note</key>
			<string>Show debugger to see output from Script Filter</string>
			<key>xpos</key>
			<integer>520</integer>
			<key>ypos</key>
			<integer>390</integer>
		</dict>
		<key>C69C33B5-9590-4B43-875B-F84DC369EE69</key>
		<dict>
			<key>colorindex</key>
			<integer>6</integer>
			<key>xpos</key>
			<integer>820</integer>
			<key>ypos</key>
			<integer>210</integer>
		</dict>
		<key>CED3ABDD-BE14-4499-A2E5-E696A1A442B1</key>
		<dict>
			<key>colorindex</key>
			<integer>1</integer>
			<key>note</key>
			<string>Show debugger to see output from Run Script</string>
			<key>xpos</key>
			<integer>720</integer>
			<key>ypos</key>
			<integer>390</integer>
		</dict>
		<key>D13C9FF3-3BA6-49C4-B33E-9E72E0D321AB</key>
		<dict>
			<key>colorindex</key>
			<integer>7</integer>
			<key>note</key>
			<string>This action causes Reminders to quit</string>
			<key>xpos</key>
			<integer>820</integer>
			<key>ypos</key>
			<integer>60</integer>
		</dict>
		<key>DE908813-1218-4700-820B-9CA485DE2D45</key>
		<dict>
			<key>colorindex</key>
			<integer>10</integer>
			<key>note</key>
			<string>TODO
Reduce code duplication</string>
			<key>xpos</key>
			<integer>200</integer>
			<key>ypos</key>
			<integer>60</integer>
		</dict>
		<key>E062AF98-6641-4949-B912-EC6480BE5339</key>
		<dict>
			<key>note</key>
			<string>Double-click this to edit default settings.</string>
			<key>xpos</key>
			<integer>410</integer>
			<key>ypos</key>
			<integer>130</integer>
		</dict>
		<key>F89ED05A-BB43-42AB-A7B5-4186CBB6B180</key>
		<dict>
			<key>colorindex</key>
			<integer>7</integer>
			<key>note</key>
			<string>This actions the selected item, creating a new reminder.</string>
			<key>xpos</key>
			<integer>510</integer>
			<key>ypos</key>
			<integer>210</integer>
		</dict>
	</dict>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>1.0.0</string>
	<key>webaddress</key>
	<string>https://github.com/taohonghui/alfred-reminder-chinese</string>
</dict>
</plist>
